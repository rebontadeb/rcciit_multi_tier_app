from flask import Flask,request,jsonify
import configparser
import cx_Oracle
 
app = Flask('event-api')
parser = configparser.ConfigParser()
configFilePath = r'./config/app.config'
parser.read(configFilePath)


PYTHON_USERNAME=parser['database']['user'];
PYTHON_PASSWORD=parser['database']['password'];
PYTHON_CONNECTSTRING=parser['database']['connectstring'];
TABLE_NAME=parser['database']['table'];
def init_session(connection, requestedTag_ignored):
    cursor = connection.cursor()
    '''
    cursor.execute("""
        ALTER SESSION SET
          TIME_ZONE = 'UTC'
          NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI'""")
    '''


def start_pool():
    pool_min = 4
    pool_max = 4
    pool_inc = 0
    pool_gmd = cx_Oracle.SPOOL_ATTRVAL_WAIT
    print("Connecting to", PYTHON_CONNECTSTRING)
    pool = cx_Oracle.SessionPool(user=PYTHON_USERNAME,
                                 password=PYTHON_PASSWORD,
                                 dsn=PYTHON_CONNECTSTRING,
                                 min=pool_min,
                                 max=pool_max,
                                 increment=pool_inc,
                                 threaded=True,
                                 getmode=pool_gmd,
                                 sessionCallback=init_session)
    return pool


def create_schema():
    connection = pool.acquire()
    cursor = connection.cursor()
    cursor.execute("""
        begin
          execute immediate 'create table """+TABLE_NAME+""" (
               id   number generated by default as identity,
               name varchar2(50) DEFAULT NULL,
               email varchar2(50) NOT NULL,
               phone varchar2(15) NOT NULL,
               gender varchar2(6) NOT NULL,
               field varchar2(20) NOT NULL,
               stream varchar2(20) NOT NULL,
               comments varchar2(200) DEFAULT NULL,            
               PRIMARY KEY (id))';
               exception when others then
              if sqlcode <> -955 then
                raise;
              end if;
          commit;
        end;""")




@app.route('/submit', methods=['POST']) #Insertion End-point
def submit_form():    
    #----------Database-Request-Body----------------
    jsonData = request.get_json()
    name = jsonData.get('name')
    email = jsonData.get('email')
    phone = jsonData.get('phone')
    gender = jsonData.get('gender')
    field = jsonData.get('field')
    stream = jsonData.get('stream')
    comments = jsonData.get('comments') 
    #----------Database-Connection-------------------
    connection = pool.acquire()
    cursor = connection.cursor()
    connection.autocommit = True
    cursor.execute("""
        INSERT INTO """+TABLE_NAME+""" (name, email, phone, gender, field,comments,stream) VALUES ('"""+name+"""','"""+email+"""','"""+phone+"""','"""+gender+"""','"""+field+"""','"""+comments+"""','"""+stream+"""')
                """)
    cursor.close()
    jsonData = jsonify({'status': "success" })
    return jsonData



@app.route('/details',methods=['GET'])#Fetch End-point
def details():
    #----------Database-Connection-------------------
    connection = pool.acquire()
    cursor = connection.cursor()
    select_query = "SELECT name, email, field, stream FROM "+TABLE_NAME
    cursor.execute(select_query)
    data = cursor.fetchall()
    cursor.close()            
    jsonData = jsonify({'results': data})
    return jsonData


if __name__ == '__main__':
    pool = start_pool()
    create_schema()
    app.run(host='0.0.0.0',port=parser['app-api']['port'])


